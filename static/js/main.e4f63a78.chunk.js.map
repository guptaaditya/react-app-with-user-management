{"version":3,"sources":["blocks/box/index.js","blocks/button/index.js","blocks/centercontainer/index.js","blocks/form/index.js","utils/helper.js","blocks/formField/index.js","blocks/input/index.js","blocks/view/index.js","components/centercontainercard/index.js","utils/ui.js","components/loginforms/login.js","components/loginforms/signup.js","components/loginforms/forgotpassword.js","components/loginforms/verification.js","components/loginforms/resetpassword.js","modules/login/signin/login.js","modules/login/actiontypes.js","modules/login/actions.js","modules/redirect/actiontypes.js","modules/redirect/actions.js","modules/login/signin/index.js","modules/login/signup/signup.js","modules/login/signup/index.js","modules/login/forgotpassword/forgotpassword.js","modules/login/forgotpassword/index.js","modules/login/verification/verification.js","modules/login/verification/index.js","modules/login/resetpassword/resetpassword.js","modules/login/resetpassword/index.js","modules/dashboard/index.js","modules/redirect/redirect.js","modules/redirect/index.js","modules/router/privateroute.js","modules/router/index.js","modules/router/routes.js","modules/redirect/reducer.js","modules/router/actiontypes.js","modules/router/reducer.js","modules/login/reducer.js","app/reducers.js","modules/login/saga.js","modules/router/actions.js","modules/redirect/saga.js","app/sagas.js","app/index.js","app/store.js","serviceWorker.js","index.js"],"names":["Box","props","children","boxProps","Container","ButtonBlock","type","Checkbox","label","Button","ButtonGroup","groupProps","Group","ButtonOr","buttonOrProps","Or","CenterContainer","cols","Grid","columns","textAlign","style","height","verticalAlign","Column","width","FormBlock","formProps","Form","FormGroup","formGroupProps","ComponentWrapper","Component","FormFieldWrapper","Field","FormInput","Input","InputBlock","iconType","inputProps","icon","View","viewProps","CenterContainerCard","centerContainerProps","iziToast","require","ToastFactory","init","toastSettings","timeout","resetOnHover","position","close","closeOnEscape","transitionIn","transitionOut","getToast","settings","showToast","view","sanitizedType","toLowerCase","typeMethod","indexOf","toastInfo","title","message","Login","state","isRememberActive","handleRememberClick","setState","prevState","onRemember","handleLoginClick","input","getUserInput","validateUserInput","onLogin","username","document","getElementById","value","password","trim","this","onSignupClick","onForgotPasswordClick","className","isLine","id","placeholder","toggle","active","onClick","primary","React","defaultProps","_","noop","Signup","handleSignupClick","onSignup","form","forms","firstname","querySelector","lastname","confirmpassword","onSigninClick","widths","fluid","ForgotPassword","handleForgotPasswordClick","onForgotPassword","useremail","onRedirect","Verification","handleVerificationCodeSubmitClick","onSubmitVerificationCode","verificationCode","onResendVerificationCode","emailAddress","ResetPassword","handleResetPasswordClick","onResetPasswordClick","handleRemember","remember","handleLogin","userInput","redirectTo","URLSearchParams","location","search","get","handleSignup","signupPath","handleForgotPassword","forgotpasswordPath","withRouter","ON_LOGIN","ON_SIGNUP","ON_FORGOT_PASSWORD","ON_FORGOT_PASSWORD_SUCCESS","ON_VERIFICATION_CODE_SUBMIT","ON_RESEND_VERIFICATION_CODE","ON_RESET_PASSWORD","onForgotPasswordSuccess","actionTypes","REDIRECT_TO","url","connect","dispatch","redirectUrl","actions","handleSignin","signinPath","VerificationCode","handleVerificationCodeSubmit","code","onVerificationCodeSubmit","handleResendVerificationCode","userManagement","resetPasswordForUserEmail","handleResetPassword","onResetPassword","Dashboard","RedirectTo","currentUrl","history","push","redirectToUrl","redirect","shouldRedirect","PureComponent","currentURL","PrivateRoute","isAuthenticated","getIsAuthenticated","path","onRedirectToLogin","rest","auth","redirectBackTo","Routes","basename","process","exact","to","initialState","prevURL","ON_AUTHENTICATION_SUCCESS","combineReducers","action","actionypes","Promise","resolve","put","redirectActions","console","log","userInputs","takeLatest","sagaMiddleware","sagas","loginSagas","redirectSagas","store","createStore","combinedReducers","compose","applyMiddleware","createTaleMiddleware","map","saga","run","initStore","App","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4f63a78.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nexport function Box(props) {\r\n    const { children, ...boxProps } = props;\r\n    return (\r\n        <Container {...boxProps}>\r\n            {children}\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport { Button, Checkbox } from 'semantic-ui-react';\r\n\r\nexport function ButtonBlock(props) {\r\n    if (props.type === 'checkbox') {\r\n        return <Checkbox label={props.label} />\r\n    }\r\n    return (\r\n        <Button {...props}>\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport function ButtonGroup(props)  {\r\n    const { children, ...groupProps } = props;\r\n    return (\r\n        <Button.Group {...groupProps}>\r\n            {children}\r\n        </Button.Group>\r\n    );\r\n}\r\n\r\nexport function ButtonOr(props) {\r\n    const { children, ...buttonOrProps } = props;\r\n    return (\r\n        <Button.Or {...buttonOrProps}>\r\n            {children}\r\n        </Button.Or>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid } from 'semantic-ui-react'\r\n\r\nexport function CenterContainer(props) {\r\n    const { cols = 6} = props;\r\n    return (\r\n        <Grid columns='equal' textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n            <Grid.Column width={cols}>\r\n                {props.children}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Form } from 'semantic-ui-react';\r\n\r\nexport function FormBlock(props) {\r\n    const { children, ...formProps } = props;\r\n    return (\r\n        <Form {...formProps}>\r\n            {children}\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport function FormGroup(props) {\r\n    const { children, ...formGroupProps } = props;\r\n    return (\r\n        <Form.Group {...formGroupProps}>\r\n            {children}\r\n        </Form.Group>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function ComponentWrapper(Component) {\r\n    return function(props) {\r\n        return (\r\n            <Component {...props}>\r\n                {props.children}\r\n            </Component>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport ComponentWrapper from 'utils/helper';\r\n\r\nexport const FormFieldWrapper = ComponentWrapper(Form.Field);\r\n\r\nexport const FormInput = ComponentWrapper(Form.Input);","import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nexport function InputBlock(props) {\r\n    const { iconType, ...inputProps } = props;\r\n    return (\r\n        <Input icon={props.iconType} {...inputProps} />\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function View(props) {\r\n    const { children, ...viewProps } = props;\r\n    return (\r\n        <div {...viewProps}>\r\n            {children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { CenterContainer } from 'blocks';\r\n\r\nexport function CenterContainerCard(props) {\r\n    const { children, ...centerContainerProps } = props;\r\n    return (\r\n        <CenterContainer {...centerContainerProps}>\r\n            {children}\r\n        </CenterContainer>\r\n    )\r\n}","const iziToast = require('izitoast');\r\n\r\nconst ToastFactory = (function () {\r\n    let init = false;\r\n    const toastSettings = {\r\n        timeout: 3000,\r\n        resetOnHover: true,\r\n        position: 'topRight',\r\n        close: true,\r\n        closeOnEscape: true,\r\n        transitionIn: 'flipInX',\r\n        transitionOut: 'flipOutX',\r\n    };\r\n    return {\r\n        getToast: function () {\r\n            if (!init) {\r\n                iziToast.settings(toastSettings);\r\n                init = true;\r\n            }\r\n            return iziToast;\r\n        }\r\n    };\r\n})();\r\n\r\nexport function showToast(view, type = '', settings = {}) {\r\n    const allowedTypes = ['success', 'info', 'error', 'warning'];\r\n    //type could be success, info, error, warning\r\n    /*\r\n        When view is a string, its a message without title,\r\n        When view is a object with title and message property use it as it is.\r\n    */\r\n    const sanitizedType = type.toLowerCase();\r\n    const typeMethod = allowedTypes.indexOf(sanitizedType) > -1 ? sanitizedType : 'show';\r\n    const toastInfo = {\r\n        title: view.title || '',\r\n        message: view.message || view || '',\r\n        ...settings,\r\n    };\r\n    ToastFactory.getToast()[typeMethod](toastInfo);\r\n};\r\n\r\nexport const onLogin = (props) => {\r\n    showToast('Message', 'success');\r\n    props.history.push('/next-url');\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Login extends React.Component {\r\n    state = {\r\n        isRememberActive: false,\r\n    };\r\n\r\n    handleRememberClick = () => {\r\n        this.setState(prevState => ({ isRememberActive: !prevState.isRememberActive }), () => {\r\n            const { onRemember } = this.props;\r\n            onRemember(this.state.isRememberActive);\r\n        });\r\n    }\r\n\r\n    handleLoginClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onLogin(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const username = document.getElementById('username').value;\r\n        const password = document.getElementById('password').value;\r\n        return {\r\n            username,\r\n            password\r\n        };\r\n    }\r\n\r\n    validateUserInput({ username, password }) {\r\n        if (!username.trim()) {\r\n            showToast('Username cannot be empty', 'error');\r\n            return false;\r\n        } else if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { isRememberActive } = this.state;\r\n        const { onSignupClick, onForgotPasswordClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={5}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Welcome back!\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='username'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                    iconType='user' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine className='text flexible-center-equidistant-cells'>\r\n                                <Button toggle active={isRememberActive} \r\n                                    onClick={this.handleRememberClick}>\r\n                                    Remember me\r\n                                </Button> \r\n                                <FormField isLine onClick={onForgotPasswordClick}>\r\n                                    <View className='inline link'>Forgot password?</View>\r\n                                </FormField>\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button className='cell no-margin' primary onClick={this.handleLoginClick}>\r\n                                    Login\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSignupClick}>\r\n                                Or <View className='inline link'>register now!</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nLogin.defaultProps = {\r\n    onRemember: _.noop,\r\n    onSignupClick: _.noop,\r\n    onForgotPasswordClick: _.noop,\r\n    onLogin: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View, FormInput, FormGroup } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Signup extends React.Component {\r\n    handleSignupClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onSignup(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const form = document.forms[0];\r\n        const firstname = form.querySelector('#firstName').value;\r\n        const lastname = form.querySelector('#lastName').value;\r\n        const username = form.querySelector('#username').value;\r\n        const confirmpassword = form.querySelector('#confirmpassword').value;\r\n        const password = form.querySelector('#password').value;\r\n        return {\r\n            username,\r\n            password,\r\n            confirmpassword,\r\n            firstname,\r\n            lastname\r\n        };\r\n    }\r\n\r\n    validateUserInput({ username, password, confirmpassword, firstname }) {\r\n        if (!firstname.trim()) {\r\n            showToast('Please enter your name', 'error');\r\n            return false;\r\n        } else if (!username.trim()) {\r\n            showToast('Username cannot be empty', 'error');\r\n            return false;\r\n        } else if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        } else if (!confirmpassword.trim()) {\r\n            showToast('Confirm password cannot be empty', 'error');\r\n            return false;\r\n        } else if (confirmpassword.trim() !== password.trim()) {\r\n            showToast('Password and Confirm password do not match', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Creating an account is quick and easy!\r\n                            </FormField>\r\n                            <FormGroup widths='equal'>\r\n                                <FormInput \r\n                                    id='firstName'\r\n                                    fluid \r\n                                    placeholder='First name' \r\n                                />\r\n                                <FormInput \r\n                                    id='lastName'\r\n                                    fluid \r\n                                    placeholder='Last name' \r\n                                />\r\n                            </FormGroup>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='username'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='confirmpassword'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Confirm Password\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button className='cell' primary onClick={this.handleSignupClick}>\r\n                                    Register\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in.</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nSignup.defaultProps = {\r\n    onSignup: _.noop,\r\n    onSigninClick: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport { showToast } from 'utils/ui';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, ButtonGroup, ButtonOr } from 'blocks';\r\n\r\nexport default class ForgotPassword extends React.Component {\r\n    handleForgotPasswordClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onForgotPassword(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const useremail = document.getElementById('useremail').value;\r\n        return {\r\n            useremail,\r\n        };\r\n    }\r\n\r\n    validateUserInput({ useremail }) {\r\n        if (!useremail.trim()) {\r\n            showToast('Please enter your Email', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter your registered email ID\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='useremail'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                    iconType='user' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <ButtonGroup>\r\n                                    <Button onClick={onSigninClick}>To Sign in</Button>\r\n                                    <ButtonOr />\r\n                                    <Button primary onClick={this.handleForgotPasswordClick}>\r\n                                        Get Verification Code\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nForgotPassword.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, ButtonGroup, ButtonOr, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Verification extends React.Component {\r\n    handleVerificationCodeSubmitClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onSubmitVerificationCode(input.verificationCode);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const verificationCode = document.getElementById('verificationCode').value;\r\n        return {\r\n            verificationCode,\r\n        };\r\n    }\r\n\r\n    validateUserInput({ verificationCode }) {\r\n        if (!verificationCode.trim()) {\r\n            showToast('Please enter the verification code', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onResendVerificationCode, emailAddress, onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter the verification code sent to <View className='inline link'>{emailAddress}</View>\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='verificationCode'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Verification Code\" \r\n                                    iconType='user secret' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <ButtonGroup>\r\n                                    <Button onClick={onResendVerificationCode}>Resend</Button>\r\n                                    <ButtonOr />\r\n                                    <Button primary onClick={this.handleVerificationCodeSubmitClick}>\r\n                                        Submit\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in.</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nVerification.propTypes = {\r\n    emailAddress: PropTypes.string.isRequired,\r\n};\r\nVerification.defaultProps = {\r\n    onResendVerificationCode: _.noop,\r\n    onSubmitVerificationCode: _.noop,\r\n    onSigninClick: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class ResetPassword extends React.Component {\r\n    handleResetPasswordClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onResetPasswordClick(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const confirmpassword = document.getElementById('confirmpassword').value;\r\n        const password = document.getElementById('password').value;\r\n        return {\r\n            confirmpassword,\r\n            password\r\n        };\r\n    }\r\n\r\n    validateUserInput({ confirmpassword, password }) {\r\n        if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        } else if (!confirmpassword.trim()) {\r\n            showToast('Confirm password cannot be empty', 'error');\r\n            return false;\r\n        } else if (confirmpassword.trim() !== password.trim()) {\r\n            showToast('Password and Confirm password do not match', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={5}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter the new password\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"New Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='confirmpassword'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Confirm New Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button className='cell no-margin' primary onClick={this.handleResetPasswordClick}>\r\n                                    Reset\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in!</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nResetPassword.defaultProps = {\r\n    onSigninClick: _.noop,\r\n    onResetPasswordClick: _.noop,\r\n};","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { LoginForm } from 'components/loginforms';\r\n\r\nclass Login extends React.Component {\r\n    handleRemember = (remember) => {\r\n\r\n    }\r\n\r\n    handleLogin = (userInput) => {\r\n        const { redirectTo, onLogin } = this.props;\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const redirectUrlFromSearch = query.get('redirectUrl');\r\n        onLogin(userInput, redirectUrlFromSearch || redirectTo);\r\n    }\r\n\r\n    handleSignup = () => this.props.onRedirect(this.props.signupPath)\r\n\r\n    handleForgotPassword = () => this.props.onRedirect(this.props.forgotpasswordPath)\r\n\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <LoginForm \r\n                    onLogin={this.handleLogin}\r\n                    onRemember={this.handleRemember} \r\n                    onSignupClick={this.handleSignup}\r\n                    onForgotPasswordClick={this.handleForgotPassword}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\nLogin.propTypes = {\r\n    signupPath: PropTypes.string.isRequired,\r\n    forgotpasswordPath: PropTypes.string.isRequired,\r\n};\r\nLogin.defaultProps = {\r\n    onLogin: _.noop,\r\n    onRedirect: _.noop,\r\n};","\r\nexport const ON_LOGIN = 'ON_LOGIN';\r\nexport const ON_LOGIN_SUCCESS = 'ON_LOGIN_SUCCESS';\r\nexport const ON_SIGNUP = 'ON_SIGNUP';\r\nexport const ON_FORGOT_PASSWORD = 'ON_FORGOT_PASSWORD';\r\nexport const ON_FORGOT_PASSWORD_SUCCESS = 'ON_FORGOT_PASSWORD_SUCCESS';\r\nexport const ON_VERIFICATION_CODE_SUBMIT = 'ON_VERIFICATION_CODE_SUBMIT';\r\nexport const ON_RESEND_VERIFICATION_CODE = 'ON_RESEND_VERIFICATION_CODE';\r\nexport const ON_RESET_PASSWORD = 'ON_RESET_PASSWORD';\r\n","import _ from 'lodash';\r\nimport * as actionTypes from './actiontypes';\r\n\r\nexport function onLogin({ username, password }, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_LOGIN,\r\n        username,\r\n        password,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onLoginSuccess() {\r\n    return {\r\n        type: actionTypes.ON_LOGIN_SUCCESS\r\n    }\r\n}\r\n\r\nexport function onSignup(userInput, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_SIGNUP,\r\n        ...userInput,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onSignupSuccess() {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport function onForgotPassword({ useremail }, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_FORGOT_PASSWORD,\r\n        useremail,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onForgotPasswordSuccess(useremail) {\r\n    return {\r\n        type: actionTypes.ON_FORGOT_PASSWORD_SUCCESS,\r\n        useremail\r\n    }\r\n}\r\n\r\nexport function onVerificatonCodeSubmit(code, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_VERIFICATION_CODE_SUBMIT,\r\n        code,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onResendVerificationCode(useremail) {\r\n    return {\r\n        type: actionTypes.ON_RESEND_VERIFICATION_CODE,\r\n        useremail\r\n    }\r\n}\r\n\r\nexport function onResetPassword(userInput, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_RESET_PASSWORD,\r\n        ...userInput,\r\n        redirectUrl,\r\n    }\r\n}","export const REDIRECT_TO = 'REDIRECT_TO';\r\nexport const REDIRECT_TO_URL = 'REDIRECT_TO_URL'","import * as actionTypes from './actiontypes';\r\n\r\nexport function redirectTo(url) {\r\n    return {\r\n        type: actionTypes.REDIRECT_TO,\r\n        url,\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport Login from './login';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n  \r\n    }),\r\n    (dispatch) => ({\r\n      onLogin: (userInput, redirectUrl) => dispatch(actions.onLogin(userInput, redirectUrl)),\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Login);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { SignupForm } from 'components/loginforms';\r\n\r\nclass Signup extends React.Component {\r\n    handleSignup = (userInput) => {\r\n        const { redirectTo, onSignup } = this.props;\r\n        onSignup(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <SignupForm \r\n                    onSignup={this.handleSignup}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(Signup);\r\nSignup.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nSignup.defaultProps = {\r\n    onSignup: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport Signup from './signup';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n  \r\n    }),\r\n    (dispatch) => ({\r\n      onSignup: (userInput, redirectUrl) => dispatch(actions.onSignup(userInput, redirectUrl)),\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Signup);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { ForgotPasswordForm } from 'components/loginforms';\r\n\r\nclass ForgotPassword extends React.Component {\r\n    handleForgotPassword = (userInput) => {\r\n        const { redirectTo, onForgotPassword } = this.props;\r\n        onForgotPassword(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <ForgotPasswordForm \r\n                    onForgotPassword={this.handleForgotPassword}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(ForgotPassword);\r\nForgotPassword.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nForgotPassword.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport ForgotPassword from './forgotpassword';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n      \r\n    }),\r\n    (dispatch) => ({\r\n      onForgotPassword: (userInput, redirectUrl) => {\r\n        return dispatch(actions.onForgotPassword(userInput, redirectUrl));\r\n      },\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(ForgotPassword);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { VerificationCodeForm } from 'components/loginforms';\r\n\r\nclass VerificationCode extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.emailAddress) this.handleSignin();\r\n    }\r\n\r\n    handleVerificationCodeSubmit = (code) => {\r\n        const { redirectTo, onVerificationCodeSubmit } = this.props;\r\n        onVerificationCodeSubmit(code, redirectTo);\r\n    }\r\n\r\n    handleResendVerificationCode = () => {\r\n        const { onResendVerificationCode, emailAddress } = this.props;\r\n        onResendVerificationCode(emailAddress);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <VerificationCodeForm \r\n                    emailAddress={this.props.emailAddress}\r\n                    onResendVerificationCode={this.handleResendVerificationCode}\r\n                    onSubmitVerificationCode={this.handleVerificationCodeSubmit}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(VerificationCode);\r\n\r\nVerificationCode.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n    emailAddress: PropTypes.string.isRequired,\r\n};\r\nVerificationCode.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport Verification from './verification';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n      emailAddress: state.userManagement.resetPasswordForUserEmail,\r\n    }),\r\n    (dispatch) => ({\r\n      onResendVerificationCode: (emailAddress) => {\r\n        return dispatch(actions.onResendVerificationCode(emailAddress));\r\n      },\r\n      onVerificationCodeSubmit: (code, redirectUrl) => {\r\n        return dispatch(actions.onVerificatonCodeSubmit(code, redirectUrl));\r\n      },\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Verification);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { ResetPasswordForm } from 'components/loginforms';\r\n\r\nclass ResetPassword extends React.Component {\r\n    handleResetPassword = (userInput) => {\r\n        const { redirectTo, onResetPassword } = this.props;\r\n        onResetPassword(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <ResetPasswordForm \r\n                    onResetPasswordClick={this.handleResetPassword}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(ResetPassword);\r\n\r\nResetPassword.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nResetPassword.defaultProps = {\r\n    onResetPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport ResetPassword from './resetpassword';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    null,\r\n    (dispatch) => ({\r\n        onResetPassword: (userInput, redirectUrl) => {\r\n            return dispatch(actions.onResetPassword(userInput, redirectUrl));\r\n        },\r\n        onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(ResetPassword);\r\n  ","import React from 'react';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render() {\r\n        return 'Dashboard';\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\n\r\nclass RedirectTo extends React.PureComponent {\r\n    state = {\r\n        currentUrl: '',\r\n    }\r\n\r\n    redirect() {\r\n        this.props.history.push(this.state.currentUrl);\r\n    }\r\n\r\n    shouldRedirect() {\r\n        if (this.props.redirectToUrl !== this.state.currentUrl) {\r\n            this.setState({ currentUrl: this.props.redirectToUrl }, this.redirect);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.shouldRedirect();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.shouldRedirect();\r\n    }\r\n    \r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default withRouter(RedirectTo);\r\n","import { connect } from 'react-redux';\r\nimport RedirectTo from './redirect';\r\n\r\nexport default connect(state => ({\r\n    redirectToUrl: state.redirect.currentURL,\r\n}))(RedirectTo)","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nexport class PrivateRoute extends React.Component {\r\n    state = {\r\n      isAuthenticated: false, \r\n    };\r\n\r\n    componentDidMount() {\r\n      const { path, isAuthenticated, onRedirectToLogin } = this.props;\r\n      if (!isAuthenticated) {\r\n        onRedirectToLogin(path);\r\n      }\r\n    }\r\n\r\n    getIsAuthenticated = () => {\r\n      return true;\r\n    }\r\n\r\n    render() {\r\n      const { isAuthenticated, children, ...rest } = this.props;\r\n\r\n      if (!isAuthenticated) return null;\r\n      return (\r\n          <Route {...rest}>\r\n            {children}\r\n          </Route>\r\n      );\r\n    }\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n  onGetAuthenticated: PropTypes.bool,\r\n};\r\n\r\nPrivateRoute.defaultProps = {\r\n  onRedirectToLogin: _.noop,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { PrivateRoute } from './privateroute';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n  state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n  }),\r\n  dispatch => ({\r\n    onRedirectToLogin: (redirectBackTo) => dispatch(redirectTo(`/login?redirectUrl=${redirectBackTo}`))\r\n  })\r\n)(PrivateRoute);","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport { Login, Signup, ForgotPassword, Verification, RedirectTo, Dashboard, ResetPassword } from 'modules';\r\nimport PrivateRoute from './index';\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/dashboard\" />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <Login redirectTo='/dashboard' signupPath='/signup' forgotpasswordPath='/forgot-password' />\r\n          </Route>\r\n          <Route exact path=\"/signup\">\r\n            <Signup redirectTo='/dashboard' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/forgot-password\">\r\n            <ForgotPassword redirectTo='/verification' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/verification\">\r\n            <Verification redirectTo='/reset-password' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/reset-password\">\r\n            <ResetPassword redirectTo='/login' signinPath='/login' />\r\n          </Route>\r\n          <PrivateRoute exact path='/dashboard'>\r\n              <Dashboard />\r\n          </PrivateRoute>\r\n        </Switch>\r\n        <RedirectTo />\r\n    </Router>\r\n  );\r\n}","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    currentURL: '',\r\n    prevURL: ''\r\n};\r\n\r\nexport default function redirectTo(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.REDIRECT_TO:\r\n            return {\r\n                prevURL: state.currentURL,\r\n                currentURL: action.url\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","export const ON_AUTHENTICATION_SUCCESS = 'ON_AUTHENTICATION_SUCCESS';","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n};\r\n\r\nexport default function auth(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.ON_AUTHENTICATION_SUCCESS:\r\n            return {\r\n                isAuthenticated: true,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    resetPasswordForUserEmail: '',\r\n};\r\n\r\nexport default function userManagement(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.ON_FORGOT_PASSWORD_SUCCESS:\r\n            return {\r\n                resetPasswordForUserEmail: action.useremail,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","import { combineReducers } from 'redux'\r\n\r\nimport redirect from 'modules/redirect/reducer';\r\nimport auth from 'modules/router/reducer';\r\nimport userManagement from 'modules/login/reducer';\r\n\r\nexport default combineReducers({\r\n  redirect,\r\n  auth,\r\n  userManagement,\r\n})","import { takeLatest, put } from 'redux-tale/es/effects';\r\nimport * as redirectActions from 'modules/redirect/actions';\r\nimport * as authActions from 'modules/router/actions';\r\nimport * as actionTypes from './actiontypes';\r\nimport * as actions from './actions';\r\nimport { showToast } from 'utils/ui';\r\n\r\nfunction* onLogin({ username, password, redirectUrl }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(authActions.onLoginSuccess());\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onSignup({ redirectUrl, ...userInputs }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield onLogin({ ...userInputs, redirectUrl });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onForgotPassword({ redirectUrl, useremail }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(actions.onForgotPasswordSuccess(useremail));\r\n        showToast(`A Verification code has been sent to ${useremail}.`, 'success');\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onResendVerificationCode({ useremail }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        showToast(`Verification code resent to ${useremail}`, 'success');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onVerificationCodeSubmit({ code, redirectUrl }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onResetPassword({ redirectUrl, ...userInputs }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        // yield put(authActions.onResetPasswordSuccess());\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n        showToast(`Your password has been changed successfully.`, 'success');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nconst onLoginSaga = takeLatest(actionTypes.ON_LOGIN, onLogin);\r\nconst onSignupSaga = takeLatest(actionTypes.ON_SIGNUP, onSignup);\r\nconst onForgotPasswordSaga = takeLatest(actionTypes.ON_FORGOT_PASSWORD, onForgotPassword);\r\nconst onResendVerificationCodeSaga = takeLatest(actionTypes.ON_RESEND_VERIFICATION_CODE, onResendVerificationCode);\r\nconst onVerificationCodeSubmitSaga = takeLatest(actionTypes.ON_VERIFICATION_CODE_SUBMIT, onVerificationCodeSubmit);\r\nconst onResetPasswordSaga = takeLatest(actionTypes.ON_RESET_PASSWORD, onResetPassword);\r\n\r\nexport default [\r\n    onLoginSaga,\r\n    onSignupSaga,\r\n    onForgotPasswordSaga,\r\n    onResendVerificationCodeSaga,\r\n    onVerificationCodeSubmitSaga,\r\n    onResetPasswordSaga\r\n];","import * as actionTypes from './actiontypes';\r\n\r\nexport function onLoginSuccess() {\r\n    return {\r\n        type: actionTypes.ON_AUTHENTICATION_SUCCESS\r\n    }\r\n}","import * as actions from './actions';\r\nimport * as actionTypes from './actiontypes';\r\nimport { takeLatest } from 'redux-tale/es/effects';\r\n\r\nfunction onRedirect({ url }) {\r\n    actions.redirectTo(url);\r\n}\r\n\r\nconst onRedirectSaga = takeLatest(actionTypes.REDIRECT_TO_URL, onRedirect);\r\n\r\nexport default [\r\n    onRedirectSaga,\r\n];","import createTaleMiddleware from 'redux-tale/es/';\r\n\r\nimport loginSagas from 'modules/login/saga';\r\nimport redirectSagas from 'modules/redirect/saga';\r\n\r\nlet sagaMiddleware;\r\n\r\nconst sagas = [\r\n    ...loginSagas,\r\n    ...redirectSagas,\r\n];\r\n\r\nexport function createSagaMiddleWare() {\r\n    sagaMiddleware = createTaleMiddleware();\r\n    return sagaMiddleware;\r\n}\r\n\r\nexport function runSagas() {\r\n    sagas.map(saga => sagaMiddleware.run(saga));\r\n}","import React from 'react';\r\nimport { Routes } from 'modules';\r\nimport { Provider } from 'react-redux';\r\nimport initStore from './store.js';\r\n\r\nconst store = initStore();\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store={store}>\r\n        <Routes />\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport combinedReducers from './reducers';\r\nimport { createSagaMiddleWare, runSagas } from './sagas';\r\n\r\nexport default function initStore() {\r\n    const store = createStore(\r\n        combinedReducers,\r\n        compose(\r\n            applyMiddleware(createSagaMiddleWare())\r\n        )\r\n    );\r\n    \r\n    runSagas();\r\n    return store;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'app';\r\nimport 'styles/index.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}